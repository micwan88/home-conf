/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/java_library_plugin.html
 */

plugins {
    id 'java'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '1.0.0'
group = 'io.github.micwan88'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
	test {
		resources {
			srcDirs = ['deploy/conf']
		}
	}
}

dependencies {
    //Log4j2
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    
    //helperclass4j
    compile group: 'io.github.micwan88', name: 'helperclass4j', version: '1.0.3'
    
    //seleniumhq
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-alpha-6'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


task genDir(type: Copy) {
	def appCfgFolder = new File("${project.projectDir}/deploy/conf")
	if (!appCfgFolder.isDirectory())
		appCfgFolder.mkdirs()
		
	def libsFolder = new File("${project.projectDir}/deploy/libs")
	if (!libsFolder.isDirectory())
		libsFolder.mkdirs()
	
	def driverFolder = new File("${project.projectDir}/deploy/driver")
	if (!driverFolder.isDirectory())
		driverFolder.mkdirs()
		
	def webFolder = new File("${project.projectDir}/deploy/web")
	if (!webFolder.isDirectory())
		webFolder.mkdirs()
}

task cleanFiles(type: Delete) {
	delete "${project.projectDir}/deploy"
}

task genConfig {
	dependsOn genDir

	doLast {
		def buildProps = new Properties()
		if (project.hasProperty('Env')) {
	 		file("${project.projectDir}/conf/buildCfg/buildCfg.${Env}").withInputStream { buildProps.load(it) }
	 	} else {
	 		file("${project.projectDir}/conf/buildCfg/buildCfg.dev").withInputStream { buildProps.load(it) }
	 	}
		
		copy {
			from "${project.projectDir}/conf/base/app"
			into "${project.projectDir}/deploy/conf"
			expand(buildProps)
		}
	}
}

task deploy {
 	dependsOn jar
 	
 	doLast {
	 	copy {
	 		from configurations.runtime
	 		from "${project.projectDir}/build/libs"
	 		
	 		//Exclude some db pool libs by helperclass4j
	 		exclude 'commons-dbcp*.jar', 'commons-pool*.jar'
	 		
	 		into "${project.projectDir}/deploy/libs"
	 	}
	 	
	 	copy {
	 		from "${project.projectDir}/scripts"
	 		into "${project.projectDir}/deploy"
	 	}
	 	
	 	copy {
	 		from "${project.projectDir}/driver"
	 		into "${project.projectDir}/deploy/driver"
	 	}
	 	
	 	copy {
	 		from "${project.projectDir}/web"
	 		into "${project.projectDir}/deploy/web"
	 	}
 	}
}

jar {
	dependsOn genConfig
}

test {
	dependsOn genConfig
}

clean {
	dependsOn cleanFiles
}